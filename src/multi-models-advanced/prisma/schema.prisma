// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "sqlite"
  url      = env("ADVANCED_MULTI_MODELS_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
  output   = "./client"
}

model CategoriesOnPosts {
  post   Post @relation(fields: [postId], references: [id])
  postId Int

  category   Category @relation(fields: [categoryId], references: [id])
  categoryId Int

  @@id([postId, categoryId])
}

model Category {
  id   Int    @id @default(autoincrement())
  name String

  posts CategoriesOnPosts[]
}

model Post {
  id       Int    @id @default(autoincrement())
  postUUID String @default(uuid())

  title     String
  content   String?
  published Boolean @default(false)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  author   User @relation(fields: [authorId], references: [id])
  authorId Int

  categories CategoriesOnPosts[]
}

model Profile {
  id           Int     @id @default(autoincrement())
  bio          String?
  profileViews Int     @default(0)

  user   User @relation(fields: [userId], references: [id])
  userId Int  @unique
}

model Fragment {
  id        Int    @id @default(autoincrement())
  indicator String

  belongsTo   User? @relation(fields: [belongsToId], references: [id])
  belongsToId Int?
}

model User {
  id   Int    @id @default(autoincrement())
  name String @unique
  age  Int    @default(0)

  posts Post[]

  profile Profile?

  fragment Fragment[]

  // user can have 0-1 invitor
  invitorId Int?
  invitor   User? @relation("UserInvitor", fields: [invitorId], references: [id])

  invitation User[] @relation("UserInvitor")

  avaliable Boolean @default(true)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
